diff --git a/include/hc.hpp b/include/hc.hpp
index dea6141d..c8673201 100644
--- a/include/hc.hpp
+++ b/include/hc.hpp
@@ -493,13 +493,19 @@ public:
     }
 
     /**
-     * Returns an opaque handle which points to the underlying HSA queue.
-     *
      * @return An opaque handle of the underlying HSA queue, if the accelerator
      *         view is based on HSA.  NULL if otherwise.
+     *
+     *         This locks the underlying RocrQueue so that the HSA
+     *         queue cannot be stolen. The caller must eventually
+     *         perform an matching release operation.
      */
-    void* get_hsa_queue() {
-        return pQueue->getHSAQueue();
+    void* acquire_locked_hsa_queue() {
+        return pQueue->acquireLockedRocrQueue();
+    }
+
+    void release_locked_hsa_queue() {
+        pQueue->releaseLockedRocrQueue();
     }
 
     /**
@@ -870,7 +876,16 @@ public:
         pQueue->set_mode(mode);
         return pQueue;
     }
-  
+
+    /**
+     * Clients can use the underlying device as an identifier for the
+     * accelerator. This complies with the equality opertor below,
+     * which says that two accelerators are the same if their pDev is
+     * the same. For example, the pointer returned here is used by HIP
+     * hostcall to track all buffers allocated on the same device.
+     */
+    const void* get_raw_device() const { return pDev; };
+
     /**
      * Compares "this" accelerator with the passed accelerator object to
      * determine if they represent the same underlying device.
diff --git a/include/kalmar_runtime.h b/include/kalmar_runtime.h
index 05871d88..713e1683 100644
--- a/include/kalmar_runtime.h
+++ b/include/kalmar_runtime.h
@@ -257,7 +257,8 @@ public:
   virtual bool isEmpty() { return 0; }
 
   /// get underlying native queue handle
-  virtual void* getHSAQueue() { return nullptr; }
+  virtual void* acquireLockedRocrQueue() { return nullptr; }
+  virtual void releaseLockedRocrQueue() { }
 
   /// get underlying native agent handle
   virtual void* getHSAAgent() { return nullptr; }
diff --git a/lib/hsa/mcwamp_hsa.cpp b/lib/hsa/mcwamp_hsa.cpp
index c7956727..85472172 100644
--- a/lib/hsa/mcwamp_hsa.cpp
+++ b/lib/hsa/mcwamp_hsa.cpp
@@ -1966,11 +1966,7 @@ public:
         }
     }
 
-    void* getHSAQueue() override {
-        return static_cast<void*>(rocrQueue->_hwQueue);
-    }
-
-    hsa_queue_t *acquireLockedRocrQueue();
+    void *acquireLockedRocrQueue();
 
     void releaseLockedRocrQueue();
 
@@ -4168,7 +4164,7 @@ Kalmar::HSADevice * HSAQueue::getHSADev() const {
     return static_cast<Kalmar::HSADevice*>(this->getDev());
 };
 
-hsa_queue_t *HSAQueue::acquireLockedRocrQueue() {
+void *HSAQueue::acquireLockedRocrQueue() {
     DBOUT(DB_LOCK, " ptr:" << this << " lock...\n");
     this->qmutex.lock();
     if (this->rocrQueue == nullptr) {
@@ -4684,7 +4680,7 @@ HSADispatch::dispatchKernelWaitComplete() {
 
     {
         // extract hsa_queue_t from HSAQueue
-        hsa_queue_t* rocrQueue = hsaQueue()->acquireLockedRocrQueue();
+        auto rocrQueue = reinterpret_cast<hsa_queue_t*>(hsaQueue()->acquireLockedRocrQueue());
 
         // dispatch kernel
         _wait_complete_status = dispatchKernel(rocrQueue, arg_vec.data(), arg_vec.size(), true);
@@ -4723,7 +4719,7 @@ HSADispatch::dispatchKernelAsync(const void *hostKernarg, int hostKernargSize, b
 
     {
         // extract hsa_queue_t from HSAQueue
-        hsa_queue_t* rocrQueue = hsaQueue()->acquireLockedRocrQueue();
+        auto rocrQueue = reinterpret_cast<hsa_queue_t*>(hsaQueue()->acquireLockedRocrQueue());
 
         // If HCC_OPT_FLUSH=1, we are not flushing to system scope after each command.
         // Set the flag so we remember to do so at next queue::wait() call.
@@ -4988,7 +4984,7 @@ HSABarrier::enqueueAsync(hc::memory_scope fenceScope) {
     hc::memory_scope toDoReleaseFenceScope = fenceScope;
     hc::memory_scope toDoAcquireFenceScope = _acquire_scope;
 
-    hsa_queue_t* rocrQueue = hsaQueue()->acquireLockedRocrQueue();
+    auto rocrQueue = reinterpret_cast<hsa_queue_t*>(hsaQueue()->acquireLockedRocrQueue());
 
     if ( hsaQueue()->nextSyncNeedsSysRelease() ) {
          toDoReleaseFenceScope = hc::system_scope;
