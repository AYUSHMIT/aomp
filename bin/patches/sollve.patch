diff --git a/Makefile b/Makefile
index 5f17a25..8538a66 100644
--- a/Makefile
+++ b/Makefile
@@ -79,7 +79,7 @@ ifneq "$(SOURCES)" ""
 # Obtain all the possible source files for C, CPP and Fortran
 SOURCES_C := $(shell find $(CURDIR)/tests/$(OMP_VERSION) -path "*$(SOURCES)" | grep "\.c$$")
 SOURCES_CPP := $(shell find $(CURDIR)/tests/$(OMP_VERSION) -path "*$(SOURCES)" | grep "\.cpp$$")
-SOURCES_F := $(shell find $(CURDIR)/tests/$(OMP_VERSION) -path "*$(SOURCES)" | grep "\(\.F90\|\.F95\|\.F03\|\.F\|\.FOR\)$$")
+SOURCES_F := " "
 $(info SOURCES = $(notdir $(SOURCES_C) $(SOURCES_CPP) $(SOURCES_F)))
 
 # Obtain the list of files that were previously
@@ -108,6 +108,7 @@ OBJS_F := $(OBJS_F:.F95=.F95.FOR.o)
 OBJS_F := $(OBJS_F:.F03=.F03.FOR.o)
 OBJS_F := $(OBJS_F:.F=.F.FOR.o)
 endif
+OBJS_F := " "
 
 # Build list of compilation dependencies
 COMP_DEP = $(OBJS_C) $(OBJS_CPP) $(OBJS_F)
@@ -134,7 +135,7 @@ ifeq "$(SOURCES)" ""
 # Getting all the source files in the project
 SOURCES_C := $(shell find $(CURDIR)/tests/$(OMP_VERSION) -name *.c)
 SOURCES_CPP := $(shell find $(CURDIR)/tests/$(OMP_VERSION) -name *.cpp)
-SOURCES_F := $(shell find $(CURDIR)/tests/$(OMP_VERSION) -name "*.F90" -o -name "*.F95" -o -name "*.F03" -o -name "*.F" -o -name "*.FOR" | grep -v "ompvv.F90")
+SOURCES_F := " "
 
 # Find all the binary files that have been previously compiled
 TESTS_TO_RUN := $(shell test -d $(BINDIR) && \
@@ -166,6 +167,7 @@ OBJS_F := $(OBJS_F:.F03=.F03.FOR.o)
 OBJS_F := $(OBJS_F:.F=.F.FOR.o)
 OBJS_F := $(OBJS_F:.FOR=.FOR.FOR.o)
 endif
+OBJS_F := " "
 COMP_DEP := $(OBJS_C) $(OBJS_CPP) $(OBJS_F)
 
 # Get all the dependencies for all rule
diff --git a/tests/4.5/target_teams_distribute/test_target_teams_distribute_reduction_add.c b/tests/4.5/target_teams_distribute/test_target_teams_distribute_reduction_add.c
index 847e8a8..1d35d2d 100644
--- a/tests/4.5/target_teams_distribute/test_target_teams_distribute_reduction_add.c
+++ b/tests/4.5/target_teams_distribute/test_target_teams_distribute_reduction_add.c
@@ -31,7 +31,7 @@ int test_add() {
     num_teams[x] = -1;
   }
 
-#pragma omp target teams distribute reduction(+:total) map(to: a[0:N], b[0:N]) map(tofrom: total, num_teams[0:N])
+#pragma omp target teams distribute reduction(+:total) map(to: a[0:N], b[0:N]) map(tofrom:  num_teams[0:N])
   for (int x = 0; x < N; ++x) {
     num_teams[x] = omp_get_num_teams();
     total += a[x] + b[x];
diff --git a/tests/4.5/target_teams_distribute/test_target_teams_distribute_reduction_and.c b/tests/4.5/target_teams_distribute/test_target_teams_distribute_reduction_and.c
index be1fdc8..19c40bc 100644
--- a/tests/4.5/target_teams_distribute/test_target_teams_distribute_reduction_and.c
+++ b/tests/4.5/target_teams_distribute/test_target_teams_distribute_reduction_and.c
@@ -44,7 +44,7 @@ int test_and() {
     result = 1;
     host_result = 1;
 
-#pragma omp target teams distribute reduction(&&:result) map(to: a[0:N]) map(tofrom: result, num_teams[0:N])
+#pragma omp target teams distribute reduction(&&:result) map(to: a[0:N]) map(tofrom: num_teams[0:N])
     for (int x = 0; x < N; ++x) {
       num_teams[x] = omp_get_num_teams();
       result = result && a[x];
diff --git a/tests/4.5/target_teams_distribute/test_target_teams_distribute_reduction_bitand.c b/tests/4.5/target_teams_distribute/test_target_teams_distribute_reduction_bitand.c
index b923ba3..57c146c 100644
--- a/tests/4.5/target_teams_distribute/test_target_teams_distribute_reduction_bitand.c
+++ b/tests/4.5/target_teams_distribute/test_target_teams_distribute_reduction_bitand.c
@@ -39,7 +39,7 @@ int test_bitand() {
     b = b + (1 << x);
   }
 
-#pragma omp target teams distribute reduction(&:b) map(to: a[0:N]) map(tofrom: b, num_teams[0:N])
+#pragma omp target teams distribute reduction(&:b) map(to: a[0:N]) map(tofrom: num_teams[0:N])
   for (int x = 0; x < N; ++x) {
     num_teams[x] = omp_get_num_teams();
     b = b & a[x];
diff --git a/tests/4.5/target_teams_distribute/test_target_teams_distribute_reduction_bitor.c b/tests/4.5/target_teams_distribute/test_target_teams_distribute_reduction_bitor.c
index 9482d21..3ab73c2 100644
--- a/tests/4.5/target_teams_distribute/test_target_teams_distribute_reduction_bitor.c
+++ b/tests/4.5/target_teams_distribute/test_target_teams_distribute_reduction_bitor.c
@@ -36,7 +36,7 @@ int test_bitor() {
 
   unsigned int b = 0;
 
-#pragma omp target teams distribute reduction(|:b) map(to: a[0:N]) map(from: b, num_teams[0:N])
+#pragma omp target teams distribute reduction(|:b) map(to: a[0:N]) map(from: num_teams[0:N])
   for (int x = 0; x < N; ++x) {
     num_teams[x] = omp_get_num_teams();
     b = b | a[x];
diff --git a/tests/4.5/target_teams_distribute/test_target_teams_distribute_reduction_bitxor.c b/tests/4.5/target_teams_distribute/test_target_teams_distribute_reduction_bitxor.c
index 42cc54a..630c9b6 100644
--- a/tests/4.5/target_teams_distribute/test_target_teams_distribute_reduction_bitxor.c
+++ b/tests/4.5/target_teams_distribute/test_target_teams_distribute_reduction_bitxor.c
@@ -30,7 +30,7 @@ int test_bitxor() {
 
   unsigned int b = 0;
 
-#pragma omp target teams distribute reduction(^:b) map(to: a[0:N]) map(tofrom: b, num_teams[0:N])
+#pragma omp target teams distribute reduction(^:b) map(to: a[0:N]) map(tofrom: num_teams[0:N])
   for (int x = 0; x < N; ++x) {
     num_teams[x] = omp_get_num_teams();
     b = (b ^ a[x]);
diff --git a/tests/4.5/target_teams_distribute/test_target_teams_distribute_reduction_max.c b/tests/4.5/target_teams_distribute/test_target_teams_distribute_reduction_max.c
index f1ad0df..73557b9 100644
--- a/tests/4.5/target_teams_distribute/test_target_teams_distribute_reduction_max.c
+++ b/tests/4.5/target_teams_distribute/test_target_teams_distribute_reduction_max.c
@@ -32,7 +32,7 @@ int test_max() {
 
   int result = 0;
 
-#pragma omp target teams distribute reduction(max:result) map(to: a[0:N], b[0:N]) map(tofrom: result, num_teams[0:N])
+#pragma omp target teams distribute reduction(max:result) map(to: a[0:N], b[0:N]) map(tofrom: num_teams[0:N])
   for (int x = 0; x < N; ++x) {
     result = fmax(a[x] + b[x], result);
     num_teams[x] = omp_get_num_teams();
diff --git a/tests/4.5/target_teams_distribute/test_target_teams_distribute_reduction_min.c b/tests/4.5/target_teams_distribute/test_target_teams_distribute_reduction_min.c
index aaf9c9c..c9d17fe 100644
--- a/tests/4.5/target_teams_distribute/test_target_teams_distribute_reduction_min.c
+++ b/tests/4.5/target_teams_distribute/test_target_teams_distribute_reduction_min.c
@@ -32,7 +32,7 @@ int test_min() {
 
   int result = a[0] + b[0];
 
-#pragma omp target teams distribute reduction(min:result) map(to: a[0:N], b[0:N]) map(tofrom: result, num_teams[0:N])
+#pragma omp target teams distribute reduction(min:result) map(to: a[0:N], b[0:N]) map(tofrom: num_teams[0:N])
   for (int x = 0; x < N; ++x) {
     num_teams[x] = omp_get_num_teams();
     result = fmin(result, a[x] + b[x]);
diff --git a/tests/4.5/target_teams_distribute/test_target_teams_distribute_reduction_multiply.c b/tests/4.5/target_teams_distribute/test_target_teams_distribute_reduction_multiply.c
index b720327..a400ce9 100644
--- a/tests/4.5/target_teams_distribute/test_target_teams_distribute_reduction_multiply.c
+++ b/tests/4.5/target_teams_distribute/test_target_teams_distribute_reduction_multiply.c
@@ -33,7 +33,7 @@ int test_multiply() {
 
   for (int x = 0; x < N; x = x + 16) {
     result = 1;
-#pragma omp target teams distribute reduction(*:result) map(to: a[0:N]) map(tofrom: result, num_teams[0:N])
+#pragma omp target teams distribute reduction(*:result) map(to: a[0:N]) map(tofrom: num_teams[0:N])
     for (int y = 0; y < 16; ++y) {
       result *= a[x + y];
       num_teams[x + y] = omp_get_num_teams();
diff --git a/tests/4.5/target_teams_distribute/test_target_teams_distribute_reduction_or.c b/tests/4.5/target_teams_distribute/test_target_teams_distribute_reduction_or.c
index 15f80bb..43341ec 100644
--- a/tests/4.5/target_teams_distribute/test_target_teams_distribute_reduction_or.c
+++ b/tests/4.5/target_teams_distribute/test_target_teams_distribute_reduction_or.c
@@ -36,7 +36,7 @@ int test_or() {
 
   char result = 0;
 
-#pragma omp target teams distribute reduction(||:result) map(to: a[0:N]) map(tofrom: result, num_teams[0:N])
+#pragma omp target teams distribute reduction(||:result) map(to: a[0:N]) map(tofrom: num_teams[0:N])
   for (int x = 0; x < N; ++x) {
     num_teams[x] = omp_get_num_teams();
     result = result || a[x];
diff --git a/tests/4.5/target_teams_distribute/test_target_teams_distribute_reduction_subtract.c b/tests/4.5/target_teams_distribute/test_target_teams_distribute_reduction_subtract.c
index 2c9db7c..0db92ef 100644
--- a/tests/4.5/target_teams_distribute/test_target_teams_distribute_reduction_subtract.c
+++ b/tests/4.5/target_teams_distribute/test_target_teams_distribute_reduction_subtract.c
@@ -31,7 +31,7 @@ int test_subtraction() {
     num_teams[x] = -x;
   }
 
-#pragma omp target teams distribute reduction(-:total) map(to: a[0:N], b[0:N]) map(tofrom: total, num_teams[0:N])
+#pragma omp target teams distribute reduction(-:total) map(to: a[0:N], b[0:N]) map(tofrom: num_teams[0:N])
   for (int x = 0; x < N; ++x) {
     num_teams[x] = omp_get_num_teams();
     total -= a[x] + b[x];
