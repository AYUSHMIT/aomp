
HOWTO BUILD THE trunk17 COMPILER

Add the following to your environment in either .bash_profile or .bashrc 

export TRUNK_REPOS=$HOME/git/trunk17.0

or set TRUNK_REPOS to a location with a fast file system.
Then log in again and execute these commands:

mkdir -p $TRUNK_REPOS
cd $TRUNK_REPOS
git clone https://github.com/ROCm-Developer-Tools/aomp
git clone https://github.com/ROCm-Developer-Tools/llvm-project
cd llvm-project
git checkout amd-trunk-dev
$TRUNK_REPOS/aomp/trunk/build_trunk.sh 


ENVIRONMENT VARIABLES TO CONTROL THE BUILD PROCESS

Default environment variables can be found in the file
TRUNK_REPOS/aomp/bin/trunk_common_vars.  Do not change this file
unless you are going to commit your changes for everyone.
trunk_common_vars is designed to allow you to change the variables
in your environment with .bashrc or .bash_profile.
Here are just a few of the variables you may want to override:

TRUNK_REPOS

See the discussion above for building trunk17 on the use of TRUNK_REPOS.

TRUNK_LINK

The default value for TRUNK_LINK is "$HOME/rocm/trunk".
The build_trunk.sh script will install into directory ${TRUNK_LINK}_17.0-0
Furthermore, it creates a symbolic link from $TRUNK_LINK to the install dir.
So $TRUNK_LINK MUST NOT be a physical directory. This symbolic link
makes it easy to switch between future qualifed releases of trunk17.
If you are on a system where $HOME is in a slow filesystem, set TRUNK_LINK
to where you want the install directory to be. For example set the following
in your .bash_profile or .bashrc then relogin:

export TRUNK_LINK=/work/$USER/rocm/trunk

Then the install scripts will install into /work/$USER/rocm/trunk_17.0-0
and a symlink will be created from $TRUNK_LINK.

NVPTXGPUS

A comma seperated list of cuda compute capabilities. Use this
reduce build times and artifacts in the install directories. For example:
export NVPTXGPUS='50,70'
will build only for sm_50 and sm_70.  Otherwise it will build for all nvidia
GPUs set in llvm-project/openmp/libomptarget/DeviceRTL/CMakeLists.txt :
set(all_capabilities 35 37 50 52 53 60 61 62 70 72 75 80 86 89 90)

GFXLIST

A space seperated list of AMD GPUs. For example, use this for most of the focus
AMDGPUs. For example:
export GFXLIST="gfx906 gfx908 gfx90a"
Otherwise, see llvm-project/openmp/libomptarget/DeviceRTL/CMakeLists.txt :
set(amdgpu_mcpus gfx700 gfx701 gfx801 gfx803 gfx900 gfx902 gfx906 gfx908 gfx90a gfx90c gfx940 gfx1010 gfx1030 gfx1031 gfx1032 gfx1033 gfx1034 gfx1035 gfx1036 gfx1100 gfx1101 gfx1102 gfx1103)

AOMP_USE_CCACHE

The default is 1 which creates these cmake vars.
"-DCMAKE_C_COMPILER_LAUNCHER=$_ccache_bin -DCMAKE_CXX_COMPILER_LAUNCHER=$_ccache_bin"
Change it to 0 to avoid ccache.

TRUNK_BUILD_DEBUG

The default is 0 (up for discussion). If you set TRUNK_BUILD_DEBUG to 1, then
this cmake variable is added "-DLIBOMPTARGET_ENABLE_DEBUG=ON".

BUILD_TYPE

The default for BUILD_TYPE is "Release". This sets the value for CMAKE_BUILD_TYPE.
See CMAKE documentation for different possible values.


RELEASES OF trunk17.

At various development check points we will qualify releases of trunk17
and increment the development version in trunk_common_vars. For example,
after the release of trunk_17.0-0, development will move to trunk_17.0-1.
The build scripts will then install into directory $HOME/rocm/trunk_17.0-1.
The symbolic link from $HOME/rocm/trunk will also change to the new
install directory.

After a trunk17 release, a static release branch will be created.
such as trunk_17.0-0. This branch will be created by interactive
rebasing all the local commits in amd-trunk-dev. Development will
continue in the branch amd-trunk-dev.


UPDATES FROM OTHER TEAM MEMBERS

In the future, there will be a new clone_trunk.sh script that will 
clone or pull updates on all the repos in $TRUNK_REPOS except aomp. 
This will be similar to the clone_aomp.sh script used for aomp.
For now, simply run 'git pull' in the repository directory to
get updates from other team members or merges from main.


TESTING trunk17
 
To use the various AOMP testing infrastructure in $TRUNK_REPOS/aomp/test
export AOMP=$HOME/rocm/trunk
or if you set TRUNK_LINK use this command
export AOMP=$TRUNK_LINK

Then for example,
cd $TRUNK_REPOS/aomp/test/smoke/vmuldemo
make run


MERGE FROM MAIN PROCESS

At any time during the development, the development branch amd-trunk-dev can
be updated from main by any team member with the script merge_from_main.sh.
This script carefully runs the git commands to merge from main.
This script ensures that neither the main branch nor amd-trunk-dev branch has
local changes. Save any of your local changes before using merge_from_main.sh.
Note: the main branch of https://github.com/ROCm-Developer-Tools/llvm-project
is automatically mirrored from llvm trunk (https://github.com/llvm/llvm-project)
main branch every three hours.

Before running merge_from_main.sh, ensure amd-trunk-dev is indeed behind main
by looking at URL https://github.com/ROCm-Developer-Tools/llvm-project/branches
or by running this command:

git rev-list --left-right --count main...amd-trunk-dev

The script terminates if it finds that amd-trunk-dev is 0 commits behind main.
